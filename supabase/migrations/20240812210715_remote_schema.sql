
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."credits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "credits" integer DEFAULT 0 NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."credits" OWNER TO "postgres";

ALTER TABLE "public"."credits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."credits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."prd_documents" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "content" "text",
    "version" integer,
    "project_id" "uuid"
);

ALTER TABLE "public"."prd_documents" OWNER TO "postgres";

ALTER TABLE "public"."prd_documents" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."prd_documents_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."projects" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "title" "text",
    "product_name" "text" NOT NULL,
    "feature_name" "text" NOT NULL,
    "overview" "text" NOT NULL,
    "feature_list" "text",
    "user_feedback" "text",
    "additional_details" "text",
    "description" "text",
    "type" character varying
);

ALTER TABLE "public"."projects" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tasks" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "projects_id" "uuid" NOT NULL,
    "title" "text" NOT NULL,
    "description" "text",
    "priority" "text" NOT NULL,
    "due_date" "date",
    "in_complete" boolean
);

ALTER TABLE "public"."tasks" OWNER TO "postgres";

ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "prd_documents_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."prd_documents"
    ADD CONSTRAINT "prd_documents_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."prd_documents"
    ADD CONSTRAINT "prd_documents_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."projects"("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "prd_documents_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_prd_document_id_fkey" FOREIGN KEY ("projects_id") REFERENCES "public"."projects"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_projects_id_fkey" FOREIGN KEY ("projects_id") REFERENCES "public"."projects"("id");

CREATE POLICY "Enable delete for authenticated users" ON "public"."projects" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable delete for authenticated users" ON "public"."tasks" FOR DELETE TO "authenticated" USING (("auth"."uid"() = ( SELECT "projects"."user_id"
   FROM "public"."projects"
  WHERE ("projects"."id" = "tasks"."projects_id"))));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."credits" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."projects" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."tasks" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = ( SELECT "projects"."user_id"
   FROM "public"."projects"
  WHERE ("projects"."id" = "tasks"."projects_id"))));

CREATE POLICY "Enable insert for service role" ON "public"."credits" FOR INSERT TO "service_role" WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."credits" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for authenticated users" ON "public"."projects" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for authenticated users" ON "public"."tasks" FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( SELECT "projects"."user_id"
   FROM "public"."projects"
  WHERE ("projects"."id" = "tasks"."projects_id"))));

CREATE POLICY "Enable read access for service role" ON "public"."credits" FOR SELECT TO "service_role" USING (true);

CREATE POLICY "Enable update for authenticated users" ON "public"."credits" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for authenticated users" ON "public"."projects" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for authenticated users" ON "public"."tasks" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = ( SELECT "projects"."user_id"
   FROM "public"."projects"
  WHERE ("projects"."id" = "tasks"."projects_id")))) WITH CHECK (("auth"."uid"() = ( SELECT "projects"."user_id"
   FROM "public"."projects"
  WHERE ("projects"."id" = "tasks"."projects_id"))));

CREATE POLICY "Enable update for service role" ON "public"."credits" FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);

ALTER TABLE "public"."credits" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."prd_documents" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tasks" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."credits" TO "anon";
GRANT ALL ON TABLE "public"."credits" TO "authenticated";
GRANT ALL ON TABLE "public"."credits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."prd_documents" TO "anon";
GRANT ALL ON TABLE "public"."prd_documents" TO "authenticated";
GRANT ALL ON TABLE "public"."prd_documents" TO "service_role";

GRANT ALL ON SEQUENCE "public"."prd_documents_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."prd_documents_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."prd_documents_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";

GRANT ALL ON TABLE "public"."tasks" TO "anon";
GRANT ALL ON TABLE "public"."tasks" TO "authenticated";
GRANT ALL ON TABLE "public"."tasks" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
